[{"D:\\sample projects\\indexdb\\src\\index.js":"1","D:\\sample projects\\indexdb\\src\\App.js":"2","D:\\sample projects\\indexdb\\src\\EpgWrapper.js":"3","D:\\sample projects\\indexdb\\src\\reportWebVitals.js":"4","D:\\sample projects\\indexdb\\src\\table.js":"5","D:\\sample projects\\indexdb\\src\\appBar.js":"6","D:\\sample projects\\indexdb\\src\\timeUtils.js":"7","D:\\sample projects\\indexdb\\src\\EpgProgramDetailsSection.js":"8","D:\\sample projects\\indexdb\\src\\EpgConfig.js":"9","D:\\sample projects\\indexdb\\src\\EpgDataContainer.js":"10","D:\\sample projects\\indexdb\\src\\EpgCalender.js":"11","D:\\sample projects\\indexdb\\src\\EpgCellSkeleton.js":"12","D:\\sample projects\\indexdb\\src\\EpgProgramCell.js":"13","D:\\projects\\dexie-indexedDB-key-value-pair\\src\\index.js":"14","D:\\projects\\dexie-indexedDB-key-value-pair\\src\\App.js":"15","D:\\projects\\dexie-indexedDB-key-value-pair\\src\\reportWebVitals.js":"16","D:\\projects\\dexie-indexedDB-key-value-pair\\src\\EpgWrapper.js":"17","D:\\projects\\dexie-indexedDB-key-value-pair\\src\\appBar.js":"18","D:\\projects\\dexie-indexedDB-key-value-pair\\src\\EpgConfig.js":"19","D:\\projects\\dexie-indexedDB-key-value-pair\\src\\timeUtils.js":"20","D:\\projects\\dexie-indexedDB-key-value-pair\\src\\table.js":"21","D:\\projects\\dexie-indexedDB-key-value-pair\\src\\EpgDataContainer.js":"22","D:\\projects\\dexie-indexedDB-key-value-pair\\src\\EpgProgramDetailsSection.js":"23","D:\\projects\\dexie-indexedDB-key-value-pair\\src\\EpgCalender.js":"24","D:\\projects\\dexie-indexedDB-key-value-pair\\src\\EpgProgramCell.js":"25","D:\\projects\\dexie-indexedDB-key-value-pair\\src\\EpgCellSkeleton.js":"26"},{"size":458,"mtime":1672742237860,"results":"27","hashOfConfig":"28"},{"size":1579,"mtime":1672672539760,"results":"29","hashOfConfig":"28"},{"size":21301,"mtime":1672744096136,"results":"30","hashOfConfig":"28"},{"size":375,"mtime":1672603992936,"results":"31","hashOfConfig":"28"},{"size":2393,"mtime":1672603992937,"results":"32","hashOfConfig":"28"},{"size":436,"mtime":1672671458884,"results":"33","hashOfConfig":"28"},{"size":5692,"mtime":1672678070851,"results":"34","hashOfConfig":"28"},{"size":4876,"mtime":1672671874558,"results":"35","hashOfConfig":"28"},{"size":3457,"mtime":1672671582374,"results":"36","hashOfConfig":"28"},{"size":7154,"mtime":1672671676864,"results":"37","hashOfConfig":"28"},{"size":8073,"mtime":1672671730393,"results":"38","hashOfConfig":"28"},{"size":728,"mtime":1672672130178,"results":"39","hashOfConfig":"28"},{"size":3183,"mtime":1672744352250,"results":"40","hashOfConfig":"28"},{"size":458,"mtime":1672742237860,"results":"41","hashOfConfig":"42"},{"size":1579,"mtime":1672672539760,"results":"43","hashOfConfig":"42"},{"size":375,"mtime":1672603992936,"results":"44","hashOfConfig":"42"},{"size":21301,"mtime":1672744096136,"results":"45","hashOfConfig":"42"},{"size":436,"mtime":1672671458884,"results":"46","hashOfConfig":"42"},{"size":3457,"mtime":1672671582374,"results":"47","hashOfConfig":"42"},{"size":5692,"mtime":1672678070851,"results":"48","hashOfConfig":"42"},{"size":2393,"mtime":1672603992937,"results":"49","hashOfConfig":"42"},{"size":7154,"mtime":1672671676864,"results":"50","hashOfConfig":"42"},{"size":4876,"mtime":1672671874558,"results":"51","hashOfConfig":"42"},{"size":8073,"mtime":1672671730393,"results":"52","hashOfConfig":"42"},{"size":3183,"mtime":1672744352250,"results":"53","hashOfConfig":"42"},{"size":728,"mtime":1672672130178,"results":"54","hashOfConfig":"42"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1u7rb1o",{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"m88hwi",{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\sample projects\\indexdb\\src\\index.js",["112"],"D:\\sample projects\\indexdb\\src\\App.js",["113","114","115"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport Dexie from \"dexie\";\r\nimport BookTable from \"./table\";\r\nimport AppBar from \"./appBar\";\r\nimport EpgWrapper from './EpgWrapper';\r\n\r\n\r\nconst BookStore = () => {\r\n  const db = new Dexie(\"bookStore\");\r\n  db.version(1).stores({\r\n    books:\r\n      \"++id, authors, average_rating, bookID, isbn, language_code, price, ratings_count, title\",\r\n  });\r\n\r\n  const pagelimit = 15;\r\n\r\n  const [offSet, setOffSet] = useState(1);\r\n  const [totalData, setTotalData] = useState([]);\r\n  const [totalCount, setTotalCount] = useState(1);\r\n\r\n  const setAllData = () => {\r\n    axios\r\n      .get(\r\n        `https://s3-ap-southeast-1.amazonaws.com/he-public-data/books8f8fe52.json`\r\n      )\r\n      .then(async (res) => {\r\n        await db.books.bulkAdd(res.data);\r\n      });\r\n    getTotalCount();\r\n    getData(1);\r\n  };\r\n\r\n  const getTotalCount = async () => {\r\n    let count = await db.books.count();\r\n    setTotalCount(count);\r\n  };\r\n\r\n  const getData = async (page) => {\r\n    setOffSet(page);\r\n    const bookData = await db.books\r\n      .offset(page * pagelimit)\r\n      .limit(pagelimit)\r\n      .toArray();\r\n\r\n    setTotalData(bookData);\r\n  };\r\n\r\n  const pageChanged=(page)=>{\r\n    getData(page)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setAllData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar />\r\n      <BookTable totalData={totalData} totalCount={totalCount} getData={getData} offSet={offSet} totalCount={totalCount} pageChanged={pageChanged} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookStore;\r\n",["116","117"],"D:\\sample projects\\indexdb\\src\\EpgWrapper.js",["118","119","120","121","122","123","124","125","126"],"D:\\sample projects\\indexdb\\src\\reportWebVitals.js",[],"D:\\sample projects\\indexdb\\src\\table.js",[],"D:\\sample projects\\indexdb\\src\\appBar.js",[],"D:\\sample projects\\indexdb\\src\\timeUtils.js",[],"D:\\sample projects\\indexdb\\src\\EpgProgramDetailsSection.js",["127","128","129","130"],"import React, { useRef, useLayoutEffect } from 'react'\r\n// import { WarningIconFilled, WarningIcon } from '../errors/ErrorPage/style'\r\nimport EpgCellSkeleton from './EpgCellSkeleton';\r\nimport EpgProgramCell from './EpgProgramCell'\r\n\r\nconst EpgProgramDetailsSection = (props) => {\r\n    const {programList = [], onSelectProgram, isLoading, isError, setError, error, labelObj, handleErrorPageBtnClick} = props;\r\n    /* ---------------------------------------------------------------------------------------------------- */\r\n    const placeholder = 10; //NEED: need to configure from contentful\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n\r\n    const onPrimaryBtnClick = () => { // hanlde the button click of error popup\r\n        console.log(\"go to video on demand\") \r\n        handleErrorPageBtnClick() // callback func to handle the button click handled in epg Wrpper\r\n    }\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n    const showPlaceholderNError = () => {\r\n        if(isLoading) { \r\n            // Show placeholder if the state is loading\r\n            const rows = [];\r\n            for(let i =0; i<placeholder; i++){\r\n                rows.push(<EpgCellSkeleton/>)\r\n            }\r\n            return rows\r\n        // } else if(isError && !error) { \r\n        //     // if error occured then technical difficulty error should be shown\r\n        //     setError({ type: \" EpgApiError\", value: { onPrimaryBtnClick }, errorIcon: <WarningIcon width={39} height={39} bottom={15.33} />, componentId:'epg-error' })\r\n        // } else if (!error) { \r\n        //     // if there is no error and the prgam array is empty then no program error page should be shown\r\n        //     setError({type: \"EPGNoProgrammes\", value: { onPrimaryBtnClick }, errorIcon: <WarningIconFilled width={39} height={39} bottom={15.33}/>, componentId:'epg-error'})\r\n        }\r\n        \r\n    }\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n    const liveProgramRef = useRef(null) // reference for live prgm, used to scroll to live program to center\r\n    const upNextProgramRef = useRef(null)// reference for upnext prgm, used to scroll to upnext program to center in the absence of live\r\n    const firstProgramRef = useRef(null)// reference for first prgm, used to scroll the page to the first program when thre is no live and upnext\r\n    /*--------------------------------------------------------------- */\r\n    const getRef = (item, index) => { // callback func to hndle the refs\r\n        if(item.isLive) return liveProgramRef\r\n        if(item.isUpNext) return upNextProgramRef\r\n        if(index === 0) return firstProgramRef\r\n        return undefined\r\n    }\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n    const scrollHandler = () => { // func to handle scroll\r\n        if (liveProgramRef.current) {\r\n             // Scroll live element to view\r\n             liveProgramRef.current.scrollIntoView({\r\n                 behavior: 'instant',\r\n                 block: 'center',\r\n               }, 900);\r\n               return\r\n         } else if (upNextProgramRef.current) {\r\n             // scroll up next to view\r\n             upNextProgramRef.current.scrollIntoView({\r\n                 behavior: 'instant',\r\n                 block: 'center',\r\n             }, 800);\r\n             return\r\n         } else if (firstProgramRef.current) {\r\n            // scroll to first element\r\n             firstProgramRef.current.scrollIntoView({\r\n                 behavior: 'instant',\r\n                 block: 'center',\r\n             }, 800);\r\n         }\r\n    }\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n    const scrollRef = useRef(null)\r\n    useLayoutEffect(() => { // to handle scroll while resizing\r\n        scrollRef.current = setTimeout(scrollHandler, 200)\r\n        window.addEventListener(\"resize\", scrollHandler);\r\n        return () => {\r\n            window.removeEventListener(\"resize\", scrollHandler);\r\n            clearTimeout(scrollRef.current)\r\n        }\r\n    },[programList])\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n\r\n    return (\r\n    <div className='epg-container'>\r\n        {programList.length ? programList.map((item, index) => {\r\n                return <EpgProgramCell key={index} programDetails ={item} onSelectProgram={onSelectProgram}  referance={getRef} index={index} labelObj={labelObj}/>\r\n            }) : showPlaceholderNError()\r\n        }\r\n    </div>\r\n  )\r\n}\r\n\r\n/* --------------------------------------------- */\r\nexport default EpgProgramDetailsSection\r\n/* --------------------------------------------- */","D:\\sample projects\\indexdb\\src\\EpgConfig.js",[],"D:\\sample projects\\indexdb\\src\\EpgDataContainer.js",["131"],"import React, { useEffect, useState } from 'react'\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n/* ---------------------------------------------------------------------------------------------------- */\r\nimport EpgCalender from './EpgCalender'\r\nimport EpgProgramDetailsSection from './EpgProgramDetailsSection'\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n // All the details and functions will be handled here\r\n\r\nconst EpgDataContainer = (props) => {\r\n    const {programList, calenderList, theme, setSelectedDate, setShowDetailPopup, dateSelected, isLoading, \r\n      isError, setSelectedPrgmObj, setError, error, fetchAnalytics, labelObj, handleErrorPageBtnClick} = props  \r\n    /* ---------------------------------------------------------------------------------------------------- */\r\n    const [selectedDayPrgmArr, setSelectedDayPrgmArr] = useState([]) // to update the selected day progm depending o the live / upnext status\r\n  /* ---------------------------------------------------------------------------------------------------- */\r\n  /* ---------------------------------------------------------------------------------------------------- */\r\n    let prgmArr = programList;\r\n    let timeoutId = '';\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n    const onSelectProgram = (selectedItem) => { // When a program from the list is selected, callback func from epgDetailsCell\r\n      prgmStateHandle(selectedItem); // func to add few more dynamic params along with the selected prgm\r\n      setShowDetailPopup(true) //show the details popup\r\n      const attr = {\r\n        \"program_title\" : selectedItem?.title || '',\r\n        \"program_id\": selectedItem?.id || '',\r\n        \"date\": dateSelected?.dateString || ''\r\n      }\r\n      fetchAnalytics('analytics','program_select', attr) // to call analytics\r\n      fetchAnalytics('log','ProgramSelected', attr, 'INFO') // to call loggly\r\n    }\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n\r\n    const prgmStateHandle = (selectedPrgm) => { // Is live timing button and play button to be shown is handled here and passed along with selected program \r\n      var dataObj = {}\r\n      if((selectedPrgm)) {\r\n        // enabling play button for passed events\r\n        if(selectedPrgm.endTimeStd < new Date().getTime()) {\r\n          dataObj.isShouldShowPlay = true;\r\n        }\r\n        // to hide play button for upcoming events\r\n        if(selectedPrgm.startTimeStd > new Date().getTime()) {\r\n          dataObj.isShouldShowPlay = false;\r\n          // enabling play button for live event as live mapping button will be enabled for live (assuming all other params to be true)\r\n        } else if(selectedPrgm.startTimeStd < new Date().getTime() && new Date().getTime() < selectedPrgm.endTimeStd) {\r\n          dataObj.isShouldShowPlay = true;\r\n        }\r\n        var newData = {...selectedPrgm, ...dataObj}\r\n        setSelectedPrgmObj(newData) // updated the selected program\r\n      }\r\n    }\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n    const updateStatusOfPrgm = () => { // update the status of today's prgm i.e isLive or isUpNext \r\n      let istimerUpdate = false;\r\n      if(dateSelected?.day !== labelObj.dateGroup.today) return\r\n      if(dateSelected?.day === labelObj.dateGroup.today && prgmArr.length > 0) {\r\n   /*--------------------------------------------------------------- */\r\n        for(let i = 0; i < prgmArr.length; i++) {\r\n          //check if the current time is between start time and end time\r\n          if(prgmArr[i].startTimeStd < new Date().getTime() && new Date().getTime() < prgmArr[i].endTimeStd) {\r\n            prgmArr[i].isLive = true;\r\n            prgmArr[i].isUpNext = false;\r\n            var timer = prgmArr[i].endTimeStd - new Date().getTime();\r\n            if(i+1 < prgmArr.length) { // updating the next item to up next\r\n              prgmArr[i+1].isUpNext = true;\r\n            }\r\n            istimerUpdate = true;\r\n            break;\r\n          }else {\r\n              prgmArr[i].isLive = false;\r\n              if(i+1 < prgmArr.length) {\r\n                prgmArr[i+1].isUpNext = false;\r\n              }        \r\n          }\r\n    /*--------------------------------------------------------------- */\r\n          // In case if there is no live asset, the first asset whose starttime is higher than currnt time will be marked as up next.\r\n          if(prgmArr[i].startTimeStd > new Date().getTime()){\r\n            prgmArr[i].isUpNext = true;\r\n            timer = prgmArr[i].startTimeStd - new Date().getTime();\r\n            istimerUpdate = true;\r\n            break;\r\n          }\r\n        }\r\n    /*--------------------------------------------------------------- */\r\n        // After the timer is updated\r\n        let prgmArray = prgmArr\r\n          setSelectedDayPrgmArr([...prgmArray]) // state updating with updated array\r\n          clearTimeout(timeoutId)\r\n          if(istimerUpdate) {\r\n            timeoutId = setTimeout(() => {\r\n              updateStatusOfPrgm()   // re-rendering after the time out func\r\n            }, timer);\r\n          }\r\n        } else {\r\n          let prgmArray = prgmArr\r\n          setSelectedDayPrgmArr([...prgmArray])\r\n          if(timeoutId) {\r\n            clearTimeout(timeoutId);\r\n          }\r\n      }\r\n    }\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n/* ---------------------------------------------------------------------------------------------------- */\r\nconst todaysProgramList = () => { // Initially the program details for the prefetched num of days is called\r\n  if(dateSelected?.day === labelObj.dateGroup.today && prgmArr?.length > 0) {\r\n    updateStatusOfPrgm();\r\n  } else {  // if not today then the array is directly updated to state variable\r\n    setSelectedDayPrgmArr(programList)\r\n    if(timeoutId) {\r\n      clearTimeout(timeoutId);\r\n    }\r\n  }\r\n}\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n    useEffect(todaysProgramList,[programList])\r\n\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n  return (\r\n    <div {...{ theme }} className='epg-details-page'>\r\n      <EpgCalender calenderList={calenderList} {...{ theme }} setSelectedDate={setSelectedDate} fetchAnalytics={fetchAnalytics} labelObj={labelObj}/>\r\n      <EpgProgramDetailsSection programList = {selectedDayPrgmArr} onSelectProgram={onSelectProgram} isLoading={isLoading} labelObj={labelObj}\r\n      isError={isError} error={error} setError={setError} handleErrorPageBtnClick={handleErrorPageBtnClick}/>\r\n    </div>\r\n  )\r\n}\r\n\r\n/* --------------------------------------------- */\r\nexport default EpgDataContainer\r\n/* --------------------------------------------- */","D:\\sample projects\\indexdb\\src\\EpgCalender.js",["132","133","134","135"],"import React, {useState, useEffect, useRef, useCallback} from 'react'\r\n// import { isTablet, isMobile } from 'react-device-detect'\r\n// import LeftArrowIcon from '../icons/LeftArrowIcon';\r\n// import RightArrowIcon from '../icons/RightArrowIcon';\r\n\r\n\r\nconst EpgCalender = (props) => {\r\n    const {calenderList, setSelectedDate, fetchAnalytics, labelObj} = props;\r\n\r\n    const calenderScrollRef = useRef(null) // Reference for calender scroll, used to show the selected date in center\r\n    const horizontalScrollRef = useRef(null)\r\n    // const leftArrowRef = useRef(null) // Refernece for left handle, used for hiding and showing the element\r\n    // const rightArrowRef = useRef(null) // Refernece for right handle, used for hiding and showing the element\r\n    const windowEleRef = useRef(null) // Reference of the window component, which is the parent of the scrolle element. The overflow: scroll happens in this component.\r\n\r\n    const [newDate, updatedDate] = useState({})\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n\r\n// const handleArrowVisibility = () => {  // func to handle the arrow visibility\r\n//       const windowWidth = document.querySelector('.epg-calender-container')?.clientWidth; // width of the window\r\n//       const scrollWidth = document.querySelector('.epg-calender')?.clientWidth; // total width of the array\r\n//     /*--------------------------------------------------------------- */\r\n//       if(windowWidth && scrollWidth) {\r\n//         const  currentScroll = windowEleRef.current.scrollLeft;\r\n//         let scrollerEnd = scrollWidth - windowWidth;\r\n//     /*--------------------------------------------------------------- */\r\n//         if(scrollWidth < windowWidth) { // when the date array is within the window width\r\n//           leftArrowRef.current.style.display = 'none'\r\n//           rightArrowRef.current.style.display = 'none'\r\n//    /*--------------------------------------------------------------- */\r\n//         } else if(currentScroll < 10) {\r\n//           // above check should ideally be currentScroll === 0,\r\n//           // but sometime there may be a slight difference of couple of pixels hence the above condition\r\n//           leftArrowRef.current.style.display = 'none'\r\n//           rightArrowRef.current.style.display = 'block'\r\n//     /*--------------------------------------------------------------- */\r\n//         } else if(Math.abs(currentScroll - scrollerEnd) < 10) {\r\n//           // above check should ideally be currentScroll === scrollerEnd,\r\n//           // but sometime there may be a slight difference of couple of pixels hence the above condition\r\n//           leftArrowRef.current.style.display = 'block'\r\n//           rightArrowRef.current.style.display = 'none'\r\n//     /*--------------------------------------------------------------- */\r\n//         } else { // else show both the arrows\r\n//           leftArrowRef.current.style.display = 'block'\r\n//           rightArrowRef.current.style.display = 'block'\r\n//         }\r\n//       }\r\n//   }\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n\r\n    const handleDateSelect = (date)=>{ // callback func to get the selected date\r\n      updatedDate(date)\r\n      setSelectedDate(date)\r\n      const attr = {\r\n        \"date\" : date.dateString || ''\r\n      } \r\n      // analytics call\r\n      fetchAnalytics('analytics','calender_date_select', attr)\r\n      fetchAnalytics('log','DateSelected', attr, 'INFO')\r\n\r\n      window.scrollTo(0, 0);\r\n\r\n    }\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n\r\n    const handleCalenderScroll = useCallback((behavior = 'smooth', initialScroll = false) => { \r\n      // To handle the scroll and scroll behaviour\r\n      // setTimeout(() => {\r\n      //   handleArrowVisibility();\r\n      //   if(calenderScrollRef.current && (initialScroll || isTablet || isMobile)) {\r\n      //     // scroll to center is enabled for mobile and tablet view and only initially for desktop view \r\n      //       calenderScrollRef.current.scrollIntoView({\r\n      //           behavior: behavior,\r\n      //           inline: 'center',\r\n      //         });\r\n      //   }\r\n      // }, 400)\r\n    }, [])\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n\r\n  const onClickLeftArrow = () => { // Handle the left scroll\r\n    const scrollWidth  = 210 \r\n    // 210: Width of 1 div calender date div is 70px so approx 3 elements will be scrolled in 1 click\r\n    const  currentScroll = windowEleRef.current.scrollLeft\r\n    windowEleRef.current.scroll({\r\n      left: currentScroll - scrollWidth\r\n    })\r\n  }\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n\r\n  const onClickRightArrow = () => { // handle right scroll\r\n    const scrollWidth  = 210 \r\n    // 210: Width of 1 div calender date div is 70px so approx 3 elements will be scrolled in 1 click\r\n    const  currentScroll = windowEleRef.current.scrollLeft\r\n    windowEleRef.current.scroll({\r\n      left: currentScroll + scrollWidth\r\n    })\r\n  }\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n  \r\n  const onSelectDate = () => { // By default setting the selected date to today\r\n    const date = calenderList.filter(item => item.day === labelObj.dateGroup.today)\r\n    handleDateSelect(date?.[0] || {})\r\n  }\r\n  \r\n  useEffect(onSelectDate,[])\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n\r\n  useEffect(() => { // scroll func is called when each date is selected\r\n      handleCalenderScroll('smooth');\r\n  }, [calenderScrollRef, newDate, handleCalenderScroll])\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n\r\n  useEffect(() => { // useeffect invoked only during initial loading only for one time\r\n    handleCalenderScroll('instant', true);\r\n  }, [handleCalenderScroll])\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n\r\n  const onHandleResize = () => {\r\n    window.addEventListener(\"resize\", () => handleCalenderScroll('smooth'));\r\n      return () => {\r\n        window.removeEventListener(\"resize\", () => handleCalenderScroll('smooth'));\r\n      };\r\n  }\r\n  useEffect(onHandleResize, []);\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n\r\n  // const onShowArrows = () => { // listener to show the scroll arrows\r\n  //   windowEleRef.current.addEventListener('scroll', handleArrowVisibility)\r\n  //       return () => windowEleRef.current.removeEventListener('scroll', handleArrowVisibility)\r\n  \r\n  // }\r\n  // useEffect(onShowArrows, []);\r\n/* ---------------------------------------------------------------------------------------------------- */\r\n    \r\n   return (\r\n    <div ref={windowEleRef} className='epg-calender-container'>\r\n      <div className='epg-calender'>\r\n        {/* <div ref={leftArrowRef} className='left-arrow' onClick={onClickLeftArrow}>\r\n          <LeftArrowIcon />\r\n        </div>         */}\r\n        {calenderList.map((item, index)  => \r\n            <div className='calender-date'>\r\n                <div key={index} ref={item.dateString === newDate.dateString ? calenderScrollRef : horizontalScrollRef} className={`calender-date-switcher ${item.dateString === newDate.dateString ? 'active': ''}`} onClick={() => handleDateSelect(item)}>\r\n                <p>{item.day}</p>\r\n                <p>{item.date}</p>\r\n                </div>\r\n            </div>\r\n        )}\r\n        {/* <div ref={rightArrowRef} className='right-arrow' onClick={onClickRightArrow}>\r\n          <RightArrowIcon />\r\n        </div> */}\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\n/* --------------------------------------------- */\r\nexport default EpgCalender\r\n/* --------------------------------------------- */\r\n","D:\\sample projects\\indexdb\\src\\EpgCellSkeleton.js",[],"D:\\sample projects\\indexdb\\src\\EpgProgramCell.js",[],"D:\\projects\\dexie-indexedDB-key-value-pair\\src\\index.js",["136"],"D:\\projects\\dexie-indexedDB-key-value-pair\\src\\App.js",["137","138","139"],"D:\\projects\\dexie-indexedDB-key-value-pair\\src\\reportWebVitals.js",[],"D:\\projects\\dexie-indexedDB-key-value-pair\\src\\EpgWrapper.js",["140","141","142","143","144","145","146","147","148"],"D:\\projects\\dexie-indexedDB-key-value-pair\\src\\appBar.js",[],"D:\\projects\\dexie-indexedDB-key-value-pair\\src\\EpgConfig.js",[],"D:\\projects\\dexie-indexedDB-key-value-pair\\src\\timeUtils.js",[],"D:\\projects\\dexie-indexedDB-key-value-pair\\src\\table.js",[],"D:\\projects\\dexie-indexedDB-key-value-pair\\src\\EpgDataContainer.js",["149"],"D:\\projects\\dexie-indexedDB-key-value-pair\\src\\EpgProgramDetailsSection.js",["150","151","152","153"],"D:\\projects\\dexie-indexedDB-key-value-pair\\src\\EpgCalender.js",["154","155","156","157"],"D:\\projects\\dexie-indexedDB-key-value-pair\\src\\EpgProgramCell.js",[],"D:\\projects\\dexie-indexedDB-key-value-pair\\src\\EpgCellSkeleton.js",[],{"ruleId":"158","severity":1,"message":"159","line":5,"column":8,"nodeType":"160","messageId":"161","endLine":5,"endColumn":11},{"ruleId":"158","severity":1,"message":"162","line":6,"column":8,"nodeType":"160","messageId":"161","endLine":6,"endColumn":18},{"ruleId":"163","severity":1,"message":"164","line":55,"column":6,"nodeType":"165","endLine":55,"endColumn":8,"suggestions":"166"},{"ruleId":"167","severity":1,"message":"168","line":60,"column":98,"nodeType":"169","messageId":"170","endLine":60,"endColumn":121},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","replacedBy":"174"},{"ruleId":"158","severity":1,"message":"175","line":19,"column":10,"nodeType":"160","messageId":"161","endLine":19,"endColumn":27},{"ruleId":"163","severity":1,"message":"176","line":74,"column":9,"nodeType":"177","endLine":113,"endColumn":4},{"ruleId":"163","severity":1,"message":"178","line":246,"column":27,"nodeType":"179","endLine":246,"endColumn":49},{"ruleId":"158","severity":1,"message":"180","line":316,"column":15,"nodeType":"160","messageId":"161","endLine":316,"endColumn":34},{"ruleId":"163","severity":1,"message":"181","line":385,"column":44,"nodeType":"165","endLine":385,"endColumn":58,"suggestions":"182"},{"ruleId":"158","severity":1,"message":"183","line":388,"column":9,"nodeType":"160","messageId":"161","endLine":388,"endColumn":23},{"ruleId":"158","severity":1,"message":"184","line":392,"column":9,"nodeType":"160","messageId":"161","endLine":392,"endColumn":27},{"ruleId":"158","severity":1,"message":"185","line":397,"column":9,"nodeType":"160","messageId":"161","endLine":397,"endColumn":26},{"ruleId":"158","severity":1,"message":"186","line":407,"column":9,"nodeType":"160","messageId":"161","endLine":407,"endColumn":21},{"ruleId":"158","severity":1,"message":"187","line":7,"column":58,"nodeType":"160","messageId":"161","endLine":7,"endColumn":65},{"ruleId":"158","severity":1,"message":"188","line":7,"column":67,"nodeType":"160","messageId":"161","endLine":7,"endColumn":75},{"ruleId":"158","severity":1,"message":"189","line":7,"column":77,"nodeType":"160","messageId":"161","endLine":7,"endColumn":82},{"ruleId":"158","severity":1,"message":"190","line":12,"column":11,"nodeType":"160","messageId":"161","endLine":12,"endColumn":28},{"ruleId":"163","severity":1,"message":"191","line":114,"column":33,"nodeType":"165","endLine":114,"endColumn":46,"suggestions":"192"},{"ruleId":"158","severity":1,"message":"193","line":81,"column":9,"nodeType":"160","messageId":"161","endLine":81,"endColumn":25},{"ruleId":"158","severity":1,"message":"194","line":91,"column":9,"nodeType":"160","messageId":"161","endLine":91,"endColumn":26},{"ruleId":"163","severity":1,"message":"195","line":106,"column":26,"nodeType":"165","endLine":106,"endColumn":28,"suggestions":"196"},{"ruleId":"163","severity":1,"message":"197","line":125,"column":29,"nodeType":"165","endLine":125,"endColumn":31,"suggestions":"198"},{"ruleId":"158","severity":1,"message":"159","line":5,"column":8,"nodeType":"160","messageId":"161","endLine":5,"endColumn":11},{"ruleId":"158","severity":1,"message":"162","line":6,"column":8,"nodeType":"160","messageId":"161","endLine":6,"endColumn":18},{"ruleId":"163","severity":1,"message":"164","line":55,"column":6,"nodeType":"165","endLine":55,"endColumn":8,"suggestions":"199"},{"ruleId":"167","severity":1,"message":"168","line":60,"column":98,"nodeType":"169","messageId":"170","endLine":60,"endColumn":121},{"ruleId":"158","severity":1,"message":"175","line":19,"column":10,"nodeType":"160","messageId":"161","endLine":19,"endColumn":27},{"ruleId":"163","severity":1,"message":"176","line":74,"column":9,"nodeType":"177","endLine":113,"endColumn":4},{"ruleId":"163","severity":1,"message":"178","line":246,"column":27,"nodeType":"179","endLine":246,"endColumn":49},{"ruleId":"158","severity":1,"message":"180","line":316,"column":15,"nodeType":"160","messageId":"161","endLine":316,"endColumn":34},{"ruleId":"163","severity":1,"message":"181","line":385,"column":44,"nodeType":"165","endLine":385,"endColumn":58,"suggestions":"200"},{"ruleId":"158","severity":1,"message":"183","line":388,"column":9,"nodeType":"160","messageId":"161","endLine":388,"endColumn":23},{"ruleId":"158","severity":1,"message":"184","line":392,"column":9,"nodeType":"160","messageId":"161","endLine":392,"endColumn":27},{"ruleId":"158","severity":1,"message":"185","line":397,"column":9,"nodeType":"160","messageId":"161","endLine":397,"endColumn":26},{"ruleId":"158","severity":1,"message":"186","line":407,"column":9,"nodeType":"160","messageId":"161","endLine":407,"endColumn":21},{"ruleId":"163","severity":1,"message":"191","line":114,"column":33,"nodeType":"165","endLine":114,"endColumn":46,"suggestions":"201"},{"ruleId":"158","severity":1,"message":"187","line":7,"column":58,"nodeType":"160","messageId":"161","endLine":7,"endColumn":65},{"ruleId":"158","severity":1,"message":"188","line":7,"column":67,"nodeType":"160","messageId":"161","endLine":7,"endColumn":75},{"ruleId":"158","severity":1,"message":"189","line":7,"column":77,"nodeType":"160","messageId":"161","endLine":7,"endColumn":82},{"ruleId":"158","severity":1,"message":"190","line":12,"column":11,"nodeType":"160","messageId":"161","endLine":12,"endColumn":28},{"ruleId":"158","severity":1,"message":"193","line":81,"column":9,"nodeType":"160","messageId":"161","endLine":81,"endColumn":25},{"ruleId":"158","severity":1,"message":"194","line":91,"column":9,"nodeType":"160","messageId":"161","endLine":91,"endColumn":26},{"ruleId":"163","severity":1,"message":"195","line":106,"column":26,"nodeType":"165","endLine":106,"endColumn":28,"suggestions":"202"},{"ruleId":"163","severity":1,"message":"197","line":125,"column":29,"nodeType":"165","endLine":125,"endColumn":31,"suggestions":"203"},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'EpgWrapper' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setAllData'. Either include it or remove the dependency array.","ArrayExpression",["204"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","no-native-reassign",["205"],"no-negated-in-lhs",["206"],"'isShowDetailPopup' is assigned a value but never used.","The 'labelObj' object makes the dependencies of useEffect Hook (at line 128) change on every render. To fix this, wrap the initialization of 'labelObj' in its own useMemo() Hook.","VariableDeclarator","Assignments to the 'prefetchedDateArray' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'selectedDateDetails' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataList', 'db.epgData', 'programListArr', and 'selectedDayProgram'. Either include them or remove the dependency array.",["207"],"'closeBtnHandle' is assigned a value but never used.","'closeHandleOutside' is assigned a value but never used.","'onLoadLiveMapping' is assigned a value but never used.","'onLoadPlayer' is assigned a value but never used.","'isError' is assigned a value but never used.","'setError' is assigned a value but never used.","'error' is assigned a value but never used.","'onPrimaryBtnClick' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dateSelected?.day', 'labelObj.dateGroup.today', 'prgmArr?.length', 'timeoutId', and 'updateStatusOfPrgm'. Either include them or remove the dependency array.",["208"],"'onClickLeftArrow' is assigned a value but never used.","'onClickRightArrow' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'calenderList', 'handleDateSelect', and 'labelObj.dateGroup.today'. Either include them or remove the dependency array.",["209"],"React Hook useEffect has a missing dependency: 'handleCalenderScroll'. Either include it or remove the dependency array.",["210"],["211"],["212"],["213"],["214"],["215"],{"desc":"216","fix":"217"},"no-global-assign","no-unsafe-negation",{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"216","fix":"226"},{"desc":"218","fix":"227"},{"desc":"220","fix":"228"},{"desc":"222","fix":"229"},{"desc":"224","fix":"230"},"Update the dependencies array to be: [setAllData]",{"range":"231","text":"232"},"Update the dependencies array to be: [dataList, dateSelected, db.epgData, programListArr, selectedDayProgram]",{"range":"233","text":"234"},"Update the dependencies array to be: [dateSelected?.day, labelObj.dateGroup.today, prgmArr?.length, programList, timeoutId, updateStatusOfPrgm]",{"range":"235","text":"236"},"Update the dependencies array to be: [calenderList, handleDateSelect, labelObj.dateGroup.today]",{"range":"237","text":"238"},"Update the dependencies array to be: [handleCalenderScroll]",{"range":"239","text":"240"},{"range":"241","text":"232"},{"range":"242","text":"234"},{"range":"243","text":"236"},{"range":"244","text":"238"},{"range":"245","text":"240"},[1312,1314],"[setAllData]",[18837,18851],"[dataList, dateSelected, db.epgData, programListArr, selectedDayProgram]",[6396,6409],"[dateSelected?.day, labelObj.dateGroup.today, prgmArr?.length, programList, timeoutId, updateStatusOfPrgm]",[5563,5565],"[calenderList, handleDateSelect, labelObj.dateGroup.today]",[6492,6494],"[handleCalenderScroll]",[1312,1314],[18837,18851],[6396,6409],[5563,5565],[6492,6494]]